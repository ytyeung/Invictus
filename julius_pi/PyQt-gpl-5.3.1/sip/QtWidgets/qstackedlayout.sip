// qstackedlayout.sip generated by MetaSIP on Fri Jul  4 10:09:34 2014
//
// This file is part of the QtWidgets Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QStackedLayout : QLayout
{
%TypeHeaderCode
#include <qstackedlayout.h>
%End

public:
    enum StackingMode
    {
        StackOne,
        StackAll,
    };

    QStackedLayout();
    explicit QStackedLayout(QWidget *parent /TransferThis/);
    explicit QStackedLayout(QLayout *parentLayout /TransferThis/);
    virtual ~QStackedLayout();
    int addWidget(QWidget *w /Transfer/);
    int insertWidget(int index, QWidget *w /Transfer/);
    QWidget *currentWidget() const;
    int currentIndex() const;
    QWidget *widget(int) const;
    virtual QWidget *widget();
    virtual int count() const;
    virtual void addItem(QLayoutItem *item /Transfer/);
    virtual QSize sizeHint() const;
    virtual QSize minimumSize() const;
    virtual QLayoutItem *itemAt(int) const;
    virtual QLayoutItem *takeAt(int) /TransferBack/;
    virtual void setGeometry(const QRect &rect);

signals:
    void widgetRemoved(int index);
    void currentChanged(int index);

public slots:
    void setCurrentIndex(int index);
    void setCurrentWidget(QWidget *w);

public:
    QStackedLayout::StackingMode stackingMode() const;
    void setStackingMode(QStackedLayout::StackingMode stackingMode);
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int width) const;

private:
    QStackedLayout(const QStackedLayout &);
};
