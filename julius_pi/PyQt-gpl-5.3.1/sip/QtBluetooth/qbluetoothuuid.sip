// qbluetoothuuid.sip generated by MetaSIP on Fri Jul  4 10:09:34 2014
//
// This file is part of the QtBluetooth Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt5.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_2_0 -)

class QBluetoothUuid : QUuid
{
%TypeHeaderCode
#include <qbluetoothuuid.h>
%End

public:
    enum ProtocolUuid
    {
        Sdp,
        Udp,
        Rfcomm,
        Tcp,
        TcsBin,
        TcsAt,
        Att,
        Obex,
        Ip,
        Ftp,
        Http,
        Wsp,
        Bnep,
        Upnp,
        Hidp,
        HardcopyControlChannel,
        HardcopyDataChannel,
        HardcopyNotification,
        Avctp,
        Avdtp,
        Cmtp,
        UdiCPlain,
        McapControlChannel,
        McapDataChannel,
        L2cap,
    };

    enum ServiceClassUuid
    {
        ServiceDiscoveryServer,
        BrowseGroupDescriptor,
        PublicBrowseGroup,
        SerialPort,
        LANAccessUsingPPP,
        DialupNetworking,
        IrMCSync,
        ObexObjectPush,
        OBEXFileTransfer,
        IrMCSyncCommand,
        Headset,
        AudioSource,
        AudioSink,
        AV_RemoteControlTarget,
        AdvancedAudioDistribution,
        AV_RemoteControl,
        AV_RemoteControlController,
        HeadsetAG,
        PANU,
        NAP,
        GN,
        DirectPrinting,
        ReferencePrinting,
        ImagingResponder,
        ImagingAutomaticArchive,
        ImagingReferenceObjects,
        Handsfree,
        HandsfreeAudioGateway,
        DirectPrintingReferenceObjectsService,
        ReflectedUI,
        BasicPrinting,
        PrintingStatus,
        HumanInterfaceDeviceService,
        HardcopyCableReplacement,
        HCRPrint,
        HCRScan,
        SIMAccess,
        PhonebookAccessPCE,
        PhonebookAccessPSE,
        PhonebookAccess,
        HeadsetHS,
        MessageAccessServer,
        MessageNotificationServer,
        MessageAccessProfile,
        PnPInformation,
        GenericNetworking,
        GenericFileTransfer,
        GenericAudio,
        GenericTelephony,
        VideoSource,
        VideoSink,
        VideoDistribution,
        HDP,
        HDPSource,
        HDPSink,
%If (Qt_5_3_0 -)
        BasicImage,
%End
%If (Qt_5_3_0 -)
        GNSS,
%End
%If (Qt_5_3_0 -)
        GNSSServer,
%End
%If (Qt_5_3_0 -)
        Display3D,
%End
%If (Qt_5_3_0 -)
        Glasses3D,
%End
%If (Qt_5_3_0 -)
        Synchronization3D,
%End
%If (Qt_5_3_0 -)
        MPSProfile,
%End
%If (Qt_5_3_0 -)
        MPSService,
%End
    };

    QBluetoothUuid();
    explicit QBluetoothUuid(quint32 uuid);
    explicit QBluetoothUuid(quint128 uuid);
    explicit QBluetoothUuid(const QString &uuid);
    QBluetoothUuid(const QBluetoothUuid &uuid);
    QBluetoothUuid(const QUuid &uuid);
    ~QBluetoothUuid();
    bool operator==(const QBluetoothUuid &other) const;
    int minimumSize() const;
    quint16 toUInt16(bool *ok = 0) const;
    quint32 toUInt32(bool *ok = 0) const;
    quint128 toUInt128() const;
};

%End
